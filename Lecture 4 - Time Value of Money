""" Exercise 1. Given a future value of $120, an interest rate of 5%, and a period of 2 years,
calculate the present value. """


def present_value(fv, r, n):
    return fv / (1 + r)**n
FV = 120
r = 0.05
n = 2
PV = present_value(FV, r, n)
print(f"The present value is: ${PV:.2f}")






""" Exercice 2. Suppose you’re expecting $500 two years from now. If the discount rate is
6%, what is this amount worth today? """ 


def calculate_present_value(fv, r, n):
    return fv / (1 + r)**n

FV = 500 
r = 0.06  
n = 2     

PV = present_value(FV, r, n)
print(f"The present value is: ${PV:.2f}")






"""Exercice 3. How much would a sum of $1000 due 5 years from now be worth today if
the interest rate is 4%?"""


def calculate_present_value(fv, r, n):
    return fv / (1 + r)**n

FV = 1000 
r = 0.04  
n = 5     

PV = present_value(FV, r, n)
print(f"The present value is: ${PV:.2f}")








"""Exercice 1. If you invest $90 today at an interest rate of 7% for a period of 1 year, how
much will you have at the end of the year? """

 
def future_value(pv, r, n):
    return pv * (1 + r)**n
PV = 90
r = 0.07
n = 1
FV = future_value(PV, r, n)
print(f"The future value is: ${FV:.2f}")







""" Exercice 2. If you place $200 in a savings account that offers a 3% interest rate compounded annually, how much will you have in the account after 2 years? """


def future_value(pv, r, n):
    return pv * (1 + r)**n
PV = 200
r = 0.03
n = 2
FV = future_value(PV, r, n)
print(f"The future value is: ${FV:.2f}")






""" Exercice 3. Given an initial investment of $150 and an annual interest rate of 5%, how
much will the investment be worth after 3 years? """


def future_value(pv, r, n):
    return pv * (1 + r)**n
PV = 150
r = 0.05
n = 3
FV = future_value(PV, r, n)
print(f"The future value is: ${FV:.2f}")





""" Calculate the present value of $115 that you are to receive one year from
now, given an interest rate of 8%. """ 


def discount(fv,r):
  return fv/(1+r)
fv=115
r=0.08

PV=discount(fv,r)
print(f"you'll receive :${pv:.2f}")







""" How much do you need to invest today to ensure you have $500 after two
years if the annual interest rate is 6%? """


def compound (fv,r,n)
  return fv*(1+r)**n

fv=500
r=0.06
n=2

PV=compound(fv,r,n)
print (f"you'll have to invest":${PV:.2f}")






"""If you are promised $180 two years from now and the discount rate is 10%,
what is the value of that promise today? """

def discount(fv,r,n)
  return fv/(1+r)**n

fv=180
r=0.1
n=2

pv=discount(fv,r,n)
print (f"the value today is":${pv:.2f})






"""Suppose you can invest money at 7% per annum. How much do you need to
invest now to ensure that you will have $1000 three years from now?"""


def discount(fv,r,n)
  return fv/(1+r)**n

fv=1000
r=0.07
n=3

pv=discount(fv,r,n)
print (f"the value today is":${pv:.2f})







""" Exercice 4.5.1.1. Fetch the daily stock data of Microsoft (ticker: ”MSFT”) for the year 2021. """


# Download Microsoft stock data
msft_data = yf.download("MSFT", start="2021-01-01", end="2022-01-01")
print(msft_data.head())






""" Exercice 2. Retrieve the historical stock price data of Google (ticker: ”GOOGL”) from
January 1, 2020, to December 31, 2022. """

  
# Import the yfinance library
import yfinance as yf

# Download Google stock data
googl_data = yf.download("GOOGL", start="2020-01-01", end="2022-12-31")
print(googl_data.head())






""" Exercice 3. How would you fetch the stock data of Amazon (ticker: ”AMZN”) for the
last quarter of 2021? """


# Import the yfinance library
import yfinance as yf

# Download Amazon stock data for the last quarter of 2021
amzn_data = yf.download("AMZN", start="2021-10-01", end="2021-12-31")
print(amzn_data.head())








""" Exercice 4.5.2.1. Plot the daily closing prices of Tesla Inc. (ticker: ”TSLA”) for the year
2020. """


tesla_data = yf.download("TSLA", start="2020-01-01", end="2021-01-01")
tesla_data[’Close’].plot(figsize=(10, 5)) #création d'un graphique des prix de clôture en utilisant plot. 10 pouces de largeur et 5 pouces de hauteur
plt.title(’Tesla Stock Closing Prices 2020’)
plt.ylabel(’Price (in \$)’)
plt.xlabel(’Date’)
plt.show()






""" Exercice 2. How would you visualize the daily closing prices of Netflix (ticker: ”NFLX”)
for the first half of 2022? """


import yfinance as yf
import matplotlib.pyplot as plt

# Download Netflix stock data for the first half of 2022
nflx_data = yf.download("NFLX", start="2022-01-01", end="2022-06-30")

# Plot the daily closing prices
nflx_data['Close'].plot(figsize=(10, 5))
plt.title('Netflix Stock Closing Prices - First Half of 2022')
plt.ylabel('Price (in \$)')
plt.xlabel('Date')
plt.show()






""" Exercice 3. Generate a plot showcasing the daily closing prices of Facebook (ticker:
”FB”) for the entire year of 2019. """


import yfinance as yf
import matplotlib.pyplot as plt

fb_data = yf.download("FB", start="2019-01-01", end="2019-12-31")

fb_data['Close'].plot(figsize=(10, 5))
plt.title('Facebook Stock Closing Prices - 2019')
plt.ylabel('Price (in $)')
plt.xlabel('Date')
plt.show()








"""Exercice 1. Calculate and plot a 30-day moving average on top of the daily closing prices
of IBM (ticker: ”IBM”) for 2020. """


ibm_data = yf.download("IBM", start="2020-01-01", end="2021-01-01")
ibm_data[’30-day MA’] = ibm_data[’Close’].rolling(window=30).mean() #sur 30 jours de prix de clôture, rolling crée une fenêtre sur 30 jours pour le calcul de la moyenne mobile, mean calcule la moyenne de ces valeurs. Le résultat est stocké dans une colonne appelée 30-day MA
ibm_data[[’Close’, ’30-day MA’]].plot(figsize=(10, 5)) #graphique qui affiche les prix de clôture quotidiens ainsi que la moyenne mobile sur 30 jours
plt.title(’IBM Stock Prices with 30-day Moving Average 2020’)
plt.ylabel(’Price (in \$)’)
plt.xlabel(’Date’)
plt.show()






"""Exercice 2. Overlay a 20-day moving average on the daily closing prices of Adobe Systems (ticker: ”ADBE”) for the year 2021. """


import yfinance as yf
import matplotlib.pyplot as plt

adbe_data = yf.download("ADBE", start="2021-01-01", end="2021-12-31")
adbe_data['20-day MA'] = adbe_data['Close'].rolling(window=20).mean()
adbe_data[['close','20-day MA']].plot(figsize=(10, 5))
plt.title('Adobe Systems (ADBE) Stock Closing Prices with 20-day Moving Average - 2021')
plt.ylabel('Price (in $)')
plt.xlabel('Date')
plt.show()






""" Exercice 3. For Nvidia Corporation (ticker: ”NVDA”) in 2022, visualize the daily closing
prices along with its 40-day moving average. """


nvda_data = yf.download("NVDA", start="2022-01-01", end="2022-12-31")
nvda_data['40-day MA'] = nvda_data['Close'].rolling(window=40).mean()
nvda_date[['close','40-day MA']].plot(figsize=(10, 5))
plt.title('Prix de clôture de Nvidia Corporation (NVDA) avec Moyenne Mobile 40 jours - 2022')
plt.ylabel('Prix (en $)')
plt.xlabel('Date')
plt.show()







"""Exercice 1. Resample the daily closing prices of Starbucks Corp. (ticker: ”SBUX”) in
2020 to get monthly average closing prices."""


sbux_data = yf.download("SBUX", start="2020-01-01", end="2021-01-01")
monthly_data = sbux_data[’Close’].resample(’M’).mean() #extrait la colonne des prix de clôture, methode resample pour rééchantilloner les données en prix moyens mensuels 'M' en prenant la moyenne de chaque mois
monthly_data.plot(figsize=(10, 5)) #graphique des prix moyens mensuels de clôture de Starbucks 
plt.title(’Starbucks Monthly Average Closing Prices 2020’)
plt.ylabel(’Price (in \$)’)
plt.xlabel(’Date’)
plt.show()






"""Exercice 2. Resample the daily closing prices of Disney (ticker: ”DIS”) in 2019 to show
bi-weekly (every two weeks) average closing prices."""

import yfinance as yf
import matplotlib.pyplot as plt

dis_data = yf.download("DIS", start="2019-01-01", end="2019-12-31")
biweekly_data = dis_data['Close'].resample('2W').mean()
biweekly_data.plot(figsize=(10, 5))
plt.title('Disney (DIS) Bi-Weekly Average Closing Prices - 2019')
plt.ylabel('Price (in $)')
plt.xlabel('Date')
plt.show()






"""Exercice 3. For Coca-Cola Company (ticker: ”KO”) in 2020, how would you derive and
plot the quarterly average closing prices?"""


ko_data = yf.download("KO", start="2020-01-01", end="2020-12-31")
quarterly_data = ko_data['Close'].resample('3M').mean()
quarterly_data.plot(figsize=(10, 5))
plt.title('Coca-Cola Company (KO) Quarterly Average Closing Prices - 2020')
plt.ylabel('Price (in $)')
plt.xlabel('Date')
plt.show()


