2.1. Exercices related to "working with Time series data" 

Exercice 1 

def calculate_average(prices)
  return sum(prices)/len(prices)
average_price = calculate_average(stock_prices)
print(f"average stockprice : ${average_price}")

Exercice 2 
def find_highest_price_day(dates, prices):
    max_price = max(prices)  # Trouve la valeur maximale dans la liste des prix
    max_price_index = prices.index(max_price)  # Trouve l'indice de la valeur maximale dans la liste des prix
    return dates[max_price_index]  # Renvoie la date correspondant à l'indice de la valeur maximale

highest_price_day = find_highest_price_day(dates, stock_prices)  # Appelle la fonction pour trouver le jour avec le prix le plus élevé
print(f"Day with the Highest Stock Price: {highest_price_day}")

Exercice 3

def determine_price_trend(prices):
    if all(prices[i] < prices[i+1] for i in range(len(prices) - 1)):
        return "Increasing"
    elif all(prices[i] > prices[i+1] for i in range(len(prices) - 1)):
        return "Decreasing"
    else:
        return "Stable"

price_trend = determine_price_trend(stock_prices)
print(f"Stock Price Trend: {price_trend}")

2.2. Exercices related to "Importance of Time Series in Finance" 

Exercice 1 

import statistics

def calculate_volatility(prices) #définition d'une fonction qui prend une liste 'prices' en entrée
    return statistics.stdev(prices) #calcule de l'écart type des prix contenus dans la liste 'prices'

volatility = calculate_volatility(stock_prices)
print(f"Volatility: ${volatility}")

Exercice 2 

def calculate_average(prices):
    return sum(prices) / len(prices)

def highlight_above_average_days(dates, prices):
    average_price = calculate_average(prices)
    above_average_days = [date for date, price in zip(dates, prices) if price > average_price] #parcourt les data et les prix en utilisant zip et vérifie le prix
    return average_price, above_average_days

average_price, above_average_days = highlight_above_average_days(dates, stock_prices)
print(f"Average Stock Price: ${average_price}")
print("Days with Stock Price above Average:")
for day in above_average_days:
    print(day)

Exercice 3

def forecast_next_day_price(prices):
    total_change = 0
    for i in range(1, len(prices)):
        total_change += prices[i] - prices[i-1]
    average_change = total_change / (len(prices) - 1)
    forecasted_price = prices[-1] + average_change
    return forecasted_price

forecasted_price = forecast_next_day_price(stock_prices)
print(f"Forecasted Next Day's Stock Price: ${forecasted_price:.2f}")
